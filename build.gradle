buildscript {
	dependencies {
		classpath 'org.flywaydb:flyway-database-postgresql:10.15.0'
	}
}

plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.jooq.jooq-codegen-gradle" version "3.19.24"
	id "org.flywaydb.flyway" version "10.15.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	jooqCodegen 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'org.mockito:mockito-core:5.12.0'
	testImplementation 'org.mockito.kotlin:mockito-kotlin:5.3.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jooq {
	configuration {
		generator {
			name = "org.jooq.codegen.KotlinGenerator"
			jdbc {
				driver = "org.postgresql.Driver"
				url = dbUrl
				user = dbUser
				password = dbPassword
			}
			database {
				name = "org.jooq.meta.postgres.PostgresDatabase"
				inputSchema = "public"
			}
			target {
				packageName = "com.example.quocard_cording_test.jooq.generated"
				directory = "build/generated-src/jooq/main"
			}
		}
	}
}

sourceSets {
	main {
		kotlin.srcDir 'build/generated-src/jooq/main'
	}
}

flyway {
	url = dbUrl
	user = dbUser
	password = dbPassword
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
	filesMatching('**/application.properties') {
		filter(
				ReplaceTokens,
				tokens: [
						'dbUser': "${dbUser}".toString(),
						'dbPassword': "${dbPassword}".toString(),
						'dbUrl': "${dbUrl}".toString(),
				]
		)
	}
}